#!/bin/bash

AWS_ENV="$HOME/.aws/env"
export user_clean=$(printf '%s' $USER | tr -d '\\')

# START USAGE DOCUMENTATION
# assume-role is a command line tool to help assume roles through a bastion account with MFA.
# Store your bastion account credentials here ~/.aws/credentials
#
# Usage: assume-role [account_name] [role] [mfa_token] [aws-region]
# account_name          account id or alias
#                       aliases stored in ~/.aws/accounts as JSON {"alias": account_id}
#                       [default 'default']
# role                  the role to assume into the account
#                       [default 'read']
# mfa_token             The MFA token for the user
#
# aws_region            region to assume into default set in ~/.aws/config
#
# END USAGE DOCUMENTATION

echo_out() {
  if [ -z "$silent" ]; then
    # If this is outputting to an eval statement we need to output a "echo" as well
    if [ -z "$OUTPUT_TO_EVAL" ]; then
      echo "$@"
    else
      echo "echo \"$*\";"
    fi
  fi
}

start-redis(){
  if ! docker volume ls | grep -q assume-role-redis-volume
  then docker volume create assume-role-redis-volume
  fi

  if ! docker network ls | grep -q assume-role-redis-network
  then docker network create assume-role-redis-network
  fi

  if docker ps -a --format '{{.Names}}' | grep -q assume-role-redis
  then return
  fi

  docker run --name assume-role-redis --network assume-role-redis-network -v "assume-role-redis-volume:/data" --restart always -d redis:7.2
}

set-redis() {
  docker exec assume-role-redis redis-cli ""
}

assume-role(){
  #######
  # PRE-CONDITIONS
  #######

  # requires jq
  if ! hash jq 2>/dev/null; then
    echo_out "assume-role requires 'jq' to be installed"
    return
  fi

  # requires aws
  if ! hash aws 2>/dev/null; then
    echo_out "assume-role requires 'aws' to be installed"
    return
  fi

  start-redis

  #######
  # SCRIPT VARIABLES
  #######

  # exports
  export AWS_SESSION_START
  export AWS_SESSION_ACCESS_KEY_ID
  export AWS_SESSION_SECRET_ACCESS_KEY
  export AWS_SESSION_SESSION_TOKEN
  export AWS_SESSION_SECURITY_TOKEN
  export AWS_ACCESS_KEY_ID
  export AWS_SECRET_ACCESS_KEY
  export AWS_SESSION_TOKEN
  export AWS_SECURITY_TOKEN
  export AWS_REGION
  export AWS_DEFAULT_REGION
  export AWS_ACCOUNT_ID
  export AWS_ACCOUNT_NAME
  export AWS_ACCOUNT_ROLE
  export GEO_ENV
  export AWS_PROFILE_ASSUME_ROLE

  # INPUTS

  read -r -d '' HELP <<EOF
  OPTIONS:
  -s    Enable silent mode
  -r    Override Region
  -h    Display this help
EOF

  OPTIND=1                # Reset in case getopts has been used previously in the shell
  invalid_options=();     # Array for invalid options

  while getopts ":shr:" opt; do
    #echo_out "Actual opt: $opt"
    case $opt in
      s)
        silent='true'
        ;;
      r)
        aws_region_input=$OPTARG
        ;;
      h)
        echo "$HELP"
        exit 1
        ;;
     \?)
        invalid_options+=($OPTARG)
        ;;
     *)
        invalid_options+=($OPTARG)
        ;;
    esac
  done

  # HANDLE INVALID OPTIONS
  if [ ${#invalid_options[@]} -ne 0 ]; then
    echo "Invalid option(s):" >&2
    for i in "${invalid_options[@]}"; do
      echo $i >&2
    done
    echo "" >&2
    echo "$HELP" >&2
    exit 1
  fi

  # SET $1 TO FIRST MASS ARGUMENT, $2 TO SECOND MASS ARGUMENT ETC
  shift $((OPTIND - 1))



  account_name_input=$1


  # DEFAULT VARIABLES
  ACCOUNTS_FILE=${ACCOUNTS_FILE:-~/.aws/accounts}
  CONF_FILE=${CONF_FILE:-~/.aws/config}
  SESSION_TIMEOUT=43200
  ROLE_SESSION_TIMEOUT=3600
  DEFAULT_ACCOUNT="default"
  DEFAULT_ROLE="read"

  if [ -z  "$AWS_PAGER" ]; then
    export AWS_PAGER="cat"
  fi

  # Force use of ~/.aws/credentials file which contains aws login account
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
  unset AWS_SECURITY_TOKEN

  #######
  # SETUP
  #######

  # load default assume-role profile if available, use "default" otherwise
  if [ "$AWS_PROFILE_ASSUME_ROLE" ]; then
    # echo "Using assume-role default profile: $AWS_PROFILE_ASSUME_ROLE"
    default_profile=${AWS_PROFILE_ASSUME_ROLE}
  else
    default_profile="default"
  fi

  # load user-set ROLE_SESSION_TIMEOUT (up to 12h, 43200 seconds), use default 1h defined above otherwise
  if [ "$AWS_ROLE_SESSION_TIMEOUT" ]; then
    ROLE_SESSION_TIMEOUT=${AWS_ROLE_SESSION_TIMEOUT}
  fi

  if [ "$AWS_ACCOUNT_NAME" ]; then
    DEFAULT_ACCOUNT=${AWS_ACCOUNT_NAME}
  fi

  # set account_name
  if [ -z "$account_name_input" ] && [ -z "$OUTPUT_TO_EVAL" ]; then
    echo -n "Assume Into Account [$DEFAULT_ACCOUNT]:"
    read -r account_name
    # default
    account_name=${account_name:-"$DEFAULT_ACCOUNT"}
  else
    account_name="$account_name_input"
  fi

  if [ -f "$CONF_FILE" ]; then
    role_input=`cat $CONF_FILE | sed -n "/^\[profile $account_name\]/,/^\[.*\]/p" | grep "role_arn" | awk '{ print $3 }' | awk -F'/' '{ print $2 }'`

    if [ ! -z "$role_input" ] && [ "$role_input" != '' ]; then
      account_id=`cat $CONF_FILE | sed -n "/^\[profile $account_name\]/,/^\[.*\]/p" | grep "role_arn" | awk '{ print $3 }' | awk -F':' '{ print $5 }'`
      role_arn=`aws configure get role_arn --profile $account_name`
      mfa_serial=`aws configure get mfa_serial --profile $account_name`
      source_profile_config=`aws configure get source_profile --profile $account_name || echo ''`
      if [ ! -z "$source_profile_config" ] && [ "$source_profile_config" != '' ]; then
        echo_out "Using source profile $source_profile_config"
        default_profile=$source_profile_config
      fi
    else
      account_id="$account_name_input"
      echo_out "Using Input as Account-ID instead of name"
      echo_out "Trying to find Account-ID in config-file"
      find_account=`cat $CONF_FILE | grep "$account_id" | wc -l`
      if [[ $find_account == 1 ]]; then
        role_arn=`cat $CONF_FILE | grep "$account_id" | awk '{print $3 }'`
        role_input=`cat $CONF_FILE | grep "$account_id" | awk '{print $3 }' | awk -F'/' '{ print $2 }'`
        account_name=`tac ~/.aws/config | grep -B 20 "$account_id" | grep "\[profile" | sed "s/\]$//" | awk '{print $2 }' | head -n1`
      else
        echo_out "Account-ID not found or multiple"
      fi
    fi
   # echo_out $role_input, $account_id
  fi

  # set account_id
  if [ -f "$ACCOUNTS_FILE" ] && [ -z "$account_id" ]; then
    account_id=$(jq ".[\"$account_name\"]" < "$ACCOUNTS_FILE" | jq --raw-output "select(. != null)")
  fi
  # If cant find the alias then set the input as the account id
  if [ -z "$account_id" ]; then
    account_id=$account_name
  fi

  # Validate Account ID
  if [[ ! $account_id =~ ^[0-9]{12}$ ]]; then
    echo_out "account_id \"$account_id\" is incorrectly formatted AWS account id"
    return
  fi

  # set role
  if [ -z "$role_input" ] && [ -z "$OUTPUT_TO_EVAL" ]; then
    echo -n "Assume Into Role [$DEFAULT_ROLE]: "
    read -r role
    role=${role:-"$DEFAULT_ROLE"}
  else
    role="$role_input"
  fi
  if [ -z "$role" ]; then
    echo_out "role not defined"
    return
  fi
  if [ -z "$role_arn" ]; then
    role_arn="arn:aws:iam::${account_id}:role/${role}"
  fi

  # set region
  AWS_CONFIG_REGION="$(aws configure get region --profile ${account_name})"
  if [ -z  "$AWS_CONFIG_REGION" ]; then
    AWS_CONFIG_REGION="$(aws configure get region --profile ${default_profile})"
  fi

  if [ -z "$aws_region_input" ] && [ -z "$AWS_REGION" ] && [ -z "$AWS_DEFAULT_REGION" ] && [ -z "$AWS_CONFIG_REGION" ] && [ -z "$OUTPUT_TO_EVAL" ]; then
    echo -n "Assume Into Region [us-east-1]: "
    read -r region
    region=${region:-"us-east-1"}
  elif [ ! -z "$aws_region_input" ]; then
    # if there is a $aws_region_input then set to $aws_region_input
    echo_out "Region from parameter $aws_region_input"
    region="$aws_region_input"
  elif [ ! -z "$AWS_CONFIG_REGION" ]; then
    echo_out "Region from config $AWS_CONFIG_REGION"
    region=$AWS_CONFIG_REGION
  elif [ ! -z "$AWS_REGION" ]; then
    # if there is a $AWS_REGION then set to $AWS_REGION
    region="$AWS_REGION"
  elif [ ! -z "$AWS_DEFAULT_REGION" ]; then
    # if there is a $AWS_DEFAULT_REGION then set to $AWS_DEFAULT_REGION
    region="$AWS_DEFAULT_REGION"
  fi
  if [ -z "$region" ]; then
    echo_out "region not defined"
    return
  fi
  AWS_REGION="$region"
  AWS_DEFAULT_REGION="$region"

  # set external ID
  AWS_CONFIG_EXTERNAL_ID="$(aws configure get external_id --profile ${account_name})"
  if [ ! -z "$AWS_CONFIG_EXTERNAL_ID" ]; then
    # echo_out "External ID from config $AWS_CONFIG_EXTERNAL_ID"
    external_id="$AWS_CONFIG_EXTERNAL_ID"
  else
    # echo_out "Fall-back: Use account ID as external ID: ${account_id}"
    external_id="${account_id}"
  fi

  # Activate our session
  NOW=$(date +"%s")
  if [ -z "$AWS_SESSION_START" ]; then
    AWS_SESSION_START=0
  fi

  ABOUT_SESSION_TIMEOUT=$((SESSION_TIMEOUT - 200))
  SESSION_TIMEOUT_DELTA=$((NOW - AWS_SESSION_START))

  if [ "$ROLE_SESSION_TIMEOUT" -gt 3600 ] || [ "$ABOUT_SESSION_TIMEOUT" -lt "$SESSION_TIMEOUT_DELTA" ]; then

    # We'll need a token to renew session
    if [ -z "$mfa_token_input" ] && [ -z "$OUTPUT_TO_EVAL" ] && [ -z "$YUBIKEY_ASSUME_KEY" ]; then
      echo -n "MFA Token: "
      read -r mfa_token
    elif [ -z "$mfa_token_input" ] && [ -z "$OUTPUT_TO_EVAL" ]; then
      YUBIKEY_MFA=$(ykman oath code "$YUBIKEY_ASSUME_KEY" | awk '{print $NF}')
      echo_out "Using MFA-Key $YUBIKEY_MFA"
      mfa_token="$YUBIKEY_MFA"
    else
      mfa_token="$mfa_token_input"
    fi

    if [ -z "$mfa_token" ]; then
      echo_out "mfa_token is not defined"
      return
    fi

    # get the username attached to your default creds
    AWS_USERNAME=$(aws iam get-user --query User.UserName --output text --profile $default_profile)

    if [ -z "$mfa_serial" ]; then
      # get MFA device attached to default creds
      MFA_DEVICE_ARGS=(--user-name "$AWS_USERNAME")
      MFA_DEVICE_ARGS+=(--query 'MFADevices[0].SerialNumber')
      MFA_DEVICE_ARGS+=(--output text)
      MFA_DEVICE_ARGS+=(--profile "${default_profile}")
      MFA_DEVICE=$(aws iam list-mfa-devices "${MFA_DEVICE_ARGS[@]}")
      MFA_DEVICE_STATUS=$?

      if [ $MFA_DEVICE_STATUS -ne 0 ]; then
        echo_out "aws iam list-mfa-devices error"
        return
      fi
    else
      MFA_DEVICE=$mfa_serial
    fi

    # if session doesn't exist, or is expired
    if [ "$ABOUT_SESSION_TIMEOUT" -lt "$SESSION_TIMEOUT_DELTA" ] && [ "$ROLE_SESSION_TIMEOUT" -le 3600 ]; then

      # 12 hour MFA w/ Session Token, which can then be reused
      SESSION_ARGS=(--duration-seconds "$SESSION_TIMEOUT")
      SESSION_ARGS+=(--serial-number "${MFA_DEVICE}")
      SESSION_ARGS+=(--token-code "${mfa_token}")
      SESSION_ARGS+=(--profile "${default_profile}")

      SESSION=$(aws sts get-session-token "${SESSION_ARGS[@]}" --output json)
      SESSION_STATUS=$?

      if [ $SESSION_STATUS -ne 0 ]; then
        echo_out "aws sts get-session-token error"
        return
      fi

      # Save Primary Credentials
      AWS_SESSION_START=$NOW
      AWS_SESSION_ACCESS_KEY_ID=$(echo "$SESSION" | jq -r .Credentials.AccessKeyId)
      AWS_SESSION_SECRET_ACCESS_KEY=$(echo "$SESSION" | jq -r .Credentials.SecretAccessKey)
      AWS_SESSION_SESSION_TOKEN=$(echo "$SESSION" | jq -r .Credentials.SessionToken)
      AWS_SESSION_SECURITY_TOKEN=$AWS_SESSION_SESSION_TOKEN
    fi

  fi

  # Use the Session in the login account
  if [ "$ROLE_SESSION_TIMEOUT" -le 3600 ]; then
    # echo "Setting session vars active"
    export AWS_ACCESS_KEY_ID=$AWS_SESSION_ACCESS_KEY_ID
    export AWS_SECRET_ACCESS_KEY=$AWS_SESSION_SECRET_ACCESS_KEY
    export AWS_SESSION_TOKEN=$AWS_SESSION_SESSION_TOKEN
    export AWS_SECURITY_TOKEN=$AWS_SESSION_SECURITY_TOKEN
  fi

  # Now drop into a role using session token's long-lived MFA
  ROLE_SESSION_ARGS=(--role-arn "${role_arn}")
  ROLE_SESSION_ARGS+=(--external-id "${external_id}")
  ROLE_SESSION_ARGS+=(--duration-seconds "${ROLE_SESSION_TIMEOUT}")
  ROLE_SESSION_ARGS+=(--role-session-name "${user_clean}-$(date +%s)")

  if [ "${ROLE_SESSION_TIMEOUT}" -gt 3600 ]; then
    echo_out "Enforce MFA caused by longer session duration"
    ROLE_SESSION_ARGS+=(--serial-number "${MFA_DEVICE}")
    ROLE_SESSION_ARGS+=(--token-code "${mfa_token}")
  fi

  ROLE_SESSION=$(aws sts assume-role "${ROLE_SESSION_ARGS[@]}" --output json || echo "fail")

  if [ "$ROLE_SESSION" = "fail" ]; then
     echo_out "Failed to export session envars."
     # This will force a new session next time assume-role is run
     unset AWS_SESSION_START
  else
    AWS_ACCESS_KEY_ID=$(echo "$ROLE_SESSION" | jq -r .Credentials.AccessKeyId)
    AWS_SECRET_ACCESS_KEY=$(echo "$ROLE_SESSION" | jq -r .Credentials.SecretAccessKey)
    AWS_SESSION_TOKEN=$(echo "$ROLE_SESSION" | jq -r .Credentials.SessionToken)
    AWS_SESSION_END=$(echo "$ROLE_SESSION" | jq -r .Credentials.Expiration)
    AWS_SECURITY_TOKEN=$AWS_SESSION_TOKEN
    AWS_ACCOUNT_ID="$account_id"
    AWS_ACCOUNT_NAME="$account_name"
    AWS_ACCOUNT_ROLE="$role"
    GEO_ENV="$account_name" # For GeoEngineer https://github.com/coinbase/geoengineer
    AWS_STS_ROLE_ARN="$role_arn"
    # echo_out "Success! IAM session envars are exported."
    echo "\uf65f switched role"
  fi

  # Switch to EKS Cluster
  eks_clusters=$(aws eks list-clusters --query 'clusters[*]' --output text)
  #count_clusters=$(echo -n "$eks_clusters" | grep -c '^')
  cluster_array=($(echo $eks_clusters | tr "\t" "\n"))

  eks_menu ()
  {
    arrsize=$1
    # echo "Size of array: $arrsize"
    # echo_out "${@:2}"
    select option in "${@:2}"; do
      if [ "$REPLY" -gt "$arrsize" ];
      then
        echo_out "Exiting..."
        break;
      elif [ 1 -le "$REPLY" ] && [ "$REPLY" -le $((arrsize)) ];
      then
        # echo "You selected $option which is option $REPLY"
        echo_out "\ufd31 Switch to $option"
        export KUBECONFIG="$HOME/.kube/$AWS_ACCOUNT_ID-$option"
        aws eks update-kubeconfig --name $option --alias $option
        chmod 0600 $KUBECONFIG
        break;
      else
        echo_out "Incorrect Input: Select a number 1-$arrsize"
      fi
    done
  }

  if [ ${#cluster_array[@]} -eq 1 ]; then
    echo_out "\ufd31 Switch to $eks_clusters"
    export KUBECONFIG="$HOME/.kube/$AWS_ACCOUNT_ID-$eks_clusters"
    aws eks update-kubeconfig --name $eks_clusters --alias $eks_clusters
    chmod 0600 $KUBECONFIG
  elif [ ${#cluster_array[@]} -gt 1 ]; then
    echo_out "More than one EKS Cluster found. Select:"
    eks_menu "${#cluster_array[@]}" "${cluster_array[@]}"
  else
    echo_out "No EKS Cluster found. ignoring ..."
  fi

  # OUTPUTS ALL THE EXPORTS for eval $(assume-role [args])
  if [ "$OUTPUT_TO_EVAL" = "true" ]; then
    echo "export AWS_REGION=\"$AWS_REGION\";"
    echo "export AWS_DEFAULT_REGION=\"$AWS_DEFAULT_REGION\";"
    echo "export AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\";"
    echo "export AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\";"
    echo "export AWS_SESSION_TOKEN=\"$AWS_SESSION_TOKEN\";"
    echo "export AWS_ACCOUNT_ID=\"$AWS_ACCOUNT_ID\";"
    echo "export AWS_ACCOUNT_NAME=\"$AWS_ACCOUNT_NAME\";"
    echo "export AWS_ACCOUNT_ROLE=\"$AWS_ACCOUNT_ROLE\";"
    echo "export AWS_SESSION_ACCESS_KEY_ID=\"$AWS_SESSION_ACCESS_KEY_ID\";"
    echo "export AWS_SESSION_SECRET_ACCESS_KEY=\"$AWS_SESSION_SECRET_ACCESS_KEY\";"
    echo "export AWS_SESSION_SESSION_TOKEN=\"$AWS_SESSION_SESSION_TOKEN\";"
    echo "export AWS_SESSION_SECURITY_TOKEN=\"$AWS_SESSION_SESSION_TOKEN\";"
    echo "export AWS_SESSION_START=\"$AWS_SESSION_START\";"
    echo "export GEO_ENV=\"$GEO_ENV\";"
    echo "export AWS_PROFILE_ASSUME_ROLE=\"$AWS_PROFILE_ASSUME_ROLE\";"
    echo "export AWS_SECURITY_TOKEN=\"$AWS_SESSION_TOKEN\";"
    echo "export AWS_STS_ROLE_ARN=\"$role_arn\";"
    echo "export KUBECONFIG=\"$KUBECONFIG\";"
  fi

  if [ -f "$AWS_ENV" ] ; then
    rm $AWS_ENV
  fi

  touch "$AWS_ENV"
  chmod 600 "$AWS_ENV"

  echo "export AWS_REGION=\"$AWS_REGION\";" >> $AWS_ENV
  echo "export AWS_DEFAULT_REGION=\"$AWS_DEFAULT_REGION\";" >> $AWS_ENV
  echo "export AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\";" >> $AWS_ENV
  echo "export AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\";" >> $AWS_ENV
  echo "export AWS_SESSION_TOKEN=\"$AWS_SESSION_TOKEN\";" >> $AWS_ENV
  echo "export AWS_ACCOUNT_ID=\"$AWS_ACCOUNT_ID\";" >> $AWS_ENV
  echo "export AWS_ACCOUNT_NAME=\"$AWS_ACCOUNT_NAME\";" >> $AWS_ENV
  echo "export AWS_ACCOUNT_ROLE=\"$AWS_ACCOUNT_ROLE\";" >> $AWS_ENV
  echo "export AWS_SESSION_ACCESS_KEY_ID=\"$AWS_SESSION_ACCESS_KEY_ID\";" >> $AWS_ENV
  echo "export AWS_SESSION_SECRET_ACCESS_KEY=\"$AWS_SESSION_SECRET_ACCESS_KEY\";" >> $AWS_ENV
  echo "export AWS_SESSION_SESSION_TOKEN=\"$AWS_SESSION_SESSION_TOKEN\";" >> $AWS_ENV
  echo "export AWS_SESSION_SECURITY_TOKEN=\"$AWS_SESSION_SESSION_TOKEN\";" >> $AWS_ENV
  echo "export AWS_SESSION_START=\"$AWS_SESSION_START\";" >> $AWS_ENV
  echo "export GEO_ENV=\"$GEO_ENV\";" >> $AWS_ENV
  echo "export AWS_PROFILE_ASSUME_ROLE=\"$AWS_PROFILE_ASSUME_ROLE\";" >> $AWS_ENV
  echo "export AWS_SECURITY_TOKEN=\"$AWS_SESSION_TOKEN\";" >> $AWS_ENV
  echo "export AWS_STS_ROLE_ARN=\"$role_arn\";" >> $AWS_ENV
  echo "export KUBECONFIG=\"$KUBECONFIG\";" >> $AWS_ENV

  # USED FOR TESTING AND DEBUGGING
  if [ "$DEBUG_ASSUME_ROLE" = "true" ]; then
    echo "AWS_CONFIG_REGION=\"$AWS_CONFIG_REGION\";"
    echo "AWS_USERNAME=\"$AWS_USERNAME\";"
    echo "MFA_DEVICE_ARGS=\"${MFA_DEVICE_ARGS[*]}\";"
    echo "MFA_DEVICE=\"$MFA_DEVICE\";"
    echo "SESSION_ARGS=\"${SESSION_ARGS[*]}\";"
    echo "SESSION=\"$SESSION\";"
    echo "ROLE_SESSION_ARGS=\"${ROLE_SESSION_ARGS[*]}\";"
    echo "ROLE_SESSION=\"$ROLE_SESSION\";"
    echo "SESSION_TIMEOUT=\"$SESSION_TIMEOUT\";"
    echo "ROLE_SESSION_TIMEOUT=\"$ROLE_SESSION_TIMEOUT\";"
    echo "AWS_PROFILE_ASSUME_ROLE=\"$AWS_PROFILE_ASSUME_ROLE\";"
    echo "AWS_STS_ROLE_ARN=\"$role_arn\";"
  fi
}

# from https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  # If the script is being sourced, do nothing
  # Supports `source $(which assume_role)` in rc file for bash and zsh
  : # noop
elif [[ "start-redis" == "${1}" ]]; then
  start-redis
elif [[ "init" == "${1}" ]]; then
  # TODO: This will be multi-shell support like rbenv, e.g. fish
  # Supports `eval "$(assume-role init -)"` in rc file
  start-redis
  if [ -f "$AWS_ENV" ] ; then
    cat $AWS_ENV
  fi
else
  # The script is being called directly
  # Supports calling being called like eval $(assume-role account role [token])
  set -eo pipefail
  OUTPUT_TO_EVAL="true"
  assume-role "$@";
fi
